name: Create release pull request

on:
  workflow_dispatch:
    inputs:
      versioning_strategy:
        description: Versioning Strategy
        required: true
        default: default
        type: choice
        options:
          - default
          - prerelease

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write
  pull-requests: write

jobs:
  create_release_pull_request:
    timeout-minutes: 15
    runs-on: ubuntu-24.04
    steps:
      - name: Bump version and create pull request
        id: bump_version_and_create_pull_request
        uses: googleapis/release-please-action@16a9c90856f42705d54a6fda1823352bdc62cf38 # 4.4.0
        with:
          config-file: release-please-config.${{ inputs.versioning_strategy }}.json
          skip-github-release: true
          target-branch: ${{ github.ref_name }}
    outputs:
      prs_created: ${{ steps.bump_version_and_create_pull_request.outputs.prs_created }}
      pr: ${{ steps.bump_version_and_create_pull_request.outputs.pr }}

  generate_artifacts:
    needs: create_release_pull_request
    if: ${{ fromJSON(needs.create_release_pull_request.outputs.prs_created) }}
    timeout-minutes: 15
    runs-on: ubuntu-24.04
    steps:
      - name: Install Ubuntu dependencies
        shell: bash
        run: |
          package_list=(
            jq
            netcat-openbsd
            ffmpeg
          )
          missing_package_list=()
          for package in "${package_list[@]}"; do
            if ! dpkg-query -W "${package}"; then
              missing_package_list+=("${package}")
            fi
          done
          if [ ${#missing_package_list[@]} -ne 0 ]; then
            sudo apt-get update
            sudo apt-get install -y "${missing_package_list[@]}"
          fi

      - name: Checkout repository
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7

      - name: Define variables
        id: define_variables
        run: |
          key_list=(
            ARTIFACT_NAME
            HOST
            IMAGES_DIRECTORY
            IMAGE_WIDTH
            PAGE_LOAD_DELAY
            PAGE_RESPONSE_DELAY
            PORT
            VIDEOS_DIRECTORY
          )
          for key in "${key_list[@]}"; do
            value=$(jq -r ".${key}" constants.json)
            echo "${key}=${value}" >> "${GITHUB_OUTPUT}"
          done
          pr_number=$(echo "${PR}" | jq -r .number)
          echo "pr_number=${pr_number}" >> "${GITHUB_OUTPUT}"
        env:
          PR: ${{ needs.create_release_pull_request.outputs.pr }}

      - name: Setup Node.js
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4.4.0
        with:
          node-version-file: .node-version
          cache: npm

      - name: Install Node.js dependencies
        shell: bash
        run: npm ci

      - name: Build pages
        shell: bash
        run: npm run build

      - name: Generate videos
        shell: bash
        run: |
          npm run preview &
          until nc -z -w1 "${HOST}" "${PORT}"; do sleep 1; done
          npm run generate-videos
        env:
          HOST: ${{ steps.define_variables.outputs.HOST }}
          PORT: ${{ steps.define_variables.outputs.PORT }}

      - name: Convert videos to images
        shell: bash
        run: |
          flow_meta_json_list=($(jq -c ".FLOW_META_LIST[]" constants.json))
          for flow_meta_json in "${flow_meta_json_list[@]}"; do
            flow_name=$(echo "${flow_meta_json}" | jq -r .name)
            mkdir -p "${IMAGES_DIRECTORY}${flow_name}"
            artifact_stem_list=($(echo "${flow_meta_json}" | jq -r ".artifactStemList[]"))
            artifact_name_list=()
            frame_count_list=()
            expected_frame_count=9223372036854775807 # Maximum integer instead of infinity
            for artifact_stem in "${artifact_stem_list[@]}"; do
              artifact_name="${flow_name}/${artifact_stem}"
              artifact_name_list+=("${artifact_name}")
              frame_count=$(ffprobe -v error -select_streams v:0 -show_entries stream=nb_read_frames -of default=nokey=1:noprint_wrappers=1 -count_frames "${VIDEOS_DIRECTORY}${artifact_name}.webm")
              frame_count_list+=(${frame_count})
              if [ ${frame_count} -lt ${expected_frame_count} ]; then
                expected_frame_count=${frame_count}
              fi
            done
            index=0
            for artifact_name in "${artifact_name_list[@]}"; do
              frame_rate_expression=$(ffprobe -v error -select_streams v:0 -show_entries stream=r_frame_rate -of csv=p=0 "${VIDEOS_DIRECTORY}${artifact_name}.webm")
              frame_rate=$(awk "BEGIN {print ${frame_rate_expression}}")
              page_delay_frame_count=$(awk "BEGIN {print int((${PAGE_LOAD_DELAY} + ${PAGE_RESPONSE_DELAY}) / 1000 * ${frame_rate})}")
              overflow_frame_count=$((frame_count_list[index] - expected_frame_count))
              trimming_frame_count=$(awk "BEGIN {print ${page_delay_frame_count} + ${overflow_frame_count}}")
              ffmpeg -i "${VIDEOS_DIRECTORY}${artifact_name}.webm" -vf "trim=start_frame=${trimming_frame_count},fps=${frame_rate},scale=${IMAGE_WIDTH}:-1:flags=lanczos,palettegen" -update 1 "${IMAGES_DIRECTORY}${artifact_name}-palette.png"
              ffmpeg -i "${VIDEOS_DIRECTORY}${artifact_name}.webm" -i "${IMAGES_DIRECTORY}${artifact_name}-palette.png" -filter_complex "[0:v]trim=start_frame=${trimming_frame_count},fps=${frame_rate},scale=${IMAGE_WIDTH}:-1:flags=lanczos[x];[x][1:v]paletteuse" "${IMAGES_DIRECTORY}${artifact_name}.gif"
              index=$((index + 1))
            done
          done
        env:
          IMAGE_WIDTH: ${{ steps.define_variables.outputs.IMAGE_WIDTH }}
          IMAGES_DIRECTORY: ${{ steps.define_variables.outputs.IMAGES_DIRECTORY }}
          PAGE_LOAD_DELAY: ${{ steps.define_variables.outputs.PAGE_LOAD_DELAY }}
          PAGE_RESPONSE_DELAY: ${{ steps.define_variables.outputs.PAGE_RESPONSE_DELAY }}
          VIDEOS_DIRECTORY: ${{ steps.define_variables.outputs.VIDEOS_DIRECTORY }}

      - name: Upload images as artifacts
        id: upload_artifacts
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: ${{ steps.define_variables.outputs.ARTIFACT_NAME }}
          path: ${{ steps.define_variables.outputs.IMAGES_DIRECTORY }}*.gif

      - name: Comment artifacts URL to pull request
        uses: peter-evans/create-or-update-comment@e8674b075228eee787fea43ef493e45ece1004c9 # v5.0.0
        with:
          issue-number: ${{ steps.define_variables.outputs.pr_number }}
          body: |
            The artifacts have been uploaded.
            ${{ steps.upload_artifacts.outputs.artifact-url }}
